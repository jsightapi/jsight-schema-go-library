// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	lexeme "github.com/jsightapi/jsight-schema-go-library/internal/lexeme"
	mock "github.com/stretchr/testify/mock"
)

// Document is an autogenerated mock type for the Document type
type Document struct {
	mock.Mock
}

// Check provides a mock function with given fields:
func (_m *Document) Check() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *Document) Len() (uint, error) {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextLexeme provides a mock function with given fields:
func (_m *Document) NextLexeme() (lexeme.LexEvent, error) {
	ret := _m.Called()

	var r0 lexeme.LexEvent
	if rf, ok := ret.Get(0).(func() lexeme.LexEvent); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(lexeme.LexEvent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewDocumentT interface {
	mock.TestingT
	Cleanup(func())
}

// NewDocument creates a new instance of Document. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDocument(t NewDocumentT) *Document {
	mock := &Document{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
